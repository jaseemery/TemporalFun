services:
  # Shared infrastructure
  temporal-db:
    image: postgres:13
    container_name: temporal-postgresql
    environment:
      POSTGRES_PASSWORD: temporal
      POSTGRES_USER: temporal
      POSTGRES_DB: temporal
    ports:
      - "5432:5432"
    volumes:
      - temporal_db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U temporal"]
      interval: 10s
      timeout: 5s
      retries: 5

  temporal:
    image: temporalio/auto-setup:1.22.0
    container_name: temporal-server
    depends_on:
      temporal-db:
        condition: service_healthy
    environment:
      - DB=postgresql
      - DB_PORT=5432
      - POSTGRES_USER=temporal
      - POSTGRES_PWD=temporal
      - POSTGRES_SEEDS=temporal-db
      - DYNAMIC_CONFIG_FILE_PATH=config/dynamicconfig/development-sql.yaml
    ports:
      - "7233:7233"
    volumes:
      - ./dynamicconfig:/etc/temporal/config/dynamicconfig
    healthcheck:
      test: ["CMD", "sh", "-c", "temporal operator cluster health --address $$(hostname -i):7233"]
      interval: 10s
      timeout: 5s
      retries: 5

  temporal-ui:
    image: temporalio/ui:2.21.3
    container_name: temporal-ui
    depends_on:
      temporal:
        condition: service_healthy
    environment:
      - TEMPORAL_ADDRESS=temporal:7233
      - TEMPORAL_CORS_ORIGINS=http://localhost:3000
    ports:
      - "8080:8080"

  # Blue Environment Workers (Live - handling production traffic)
  temporal-worker-blue-1:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: temporal-worker-blue-1
    depends_on:
      temporal:
        condition: service_healthy
    environment:
      - TEMPORAL_SERVER=temporal:7233
      - TASK_QUEUE=production
      - ENVIRONMENT=blue
      - WORKER_IDENTITY=blue-1
    restart: unless-stopped

  temporal-worker-blue-2:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: temporal-worker-blue-2
    depends_on:
      temporal:
        condition: service_healthy
    environment:
      - TEMPORAL_SERVER=temporal:7233
      - TASK_QUEUE=production
      - ENVIRONMENT=blue
      - WORKER_IDENTITY=blue-2
    restart: unless-stopped

  # Green Environment Workers (Staging - for testing new deployments)
  temporal-worker-green-1:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: temporal-worker-green-1
    depends_on:
      temporal:
        condition: service_healthy
    environment:
      - TEMPORAL_SERVER=temporal:7233
      - TASK_QUEUE=staging
      - ENVIRONMENT=green
      - WORKER_IDENTITY=green-1
    restart: unless-stopped

  temporal-worker-green-2:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: temporal-worker-green-2
    depends_on:
      temporal:
        condition: service_healthy
    environment:
      - TEMPORAL_SERVER=temporal:7233
      - TASK_QUEUE=staging
      - ENVIRONMENT=green
      - WORKER_IDENTITY=green-2
    restart: unless-stopped

volumes:
  temporal_db_data: